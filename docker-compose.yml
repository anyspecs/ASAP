services:
  # Redis 容器
  redis:
    image: redis:7-alpine
    container_name: redis-asap
    env_file:
      - .env
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --bind 0.0.0.0
      --port 6380
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --loglevel notice
    ports:
      - "127.0.0.1:6380:6380"  # 只绑定到本地回环地址
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - asap_internal
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "127.0.0.1", "-p", "6380", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 后端API容器
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.debian
    container_name: asap-backend
    env_file:
      - .env
    ports:
      - "127.0.0.1:3000:3000"  # 只绑定到本地回环地址
    volumes:
      - backend_data:/data
      - backend_logs:/app/logs
      - ./uploads:/data/upload
    environment:
      - REDIS_CONN_STRING=redis://:${REDIS_PASSWORD}@redis:6380/0
      - SESSION_SECRET=${SESSION_SECRET}
      - UPLOAD_PATH=/data/upload
      - DB_PATH=/data/database
      - DB_FILE=asap.db
      - PORT=3000
      - GIN_MODE=release
      - DOMAIN=${DOMAIN}
      - ENABLE_TLS=${ENABLE_TLS:-true}
    restart: unless-stopped
    networks:
      - asap_internal
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端容器
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-v1.0.0}
    container_name: asap-frontend
    ports:
      - "80:80"   # HTTP端口
      - "443:443" # HTTPS端口
    volumes:
      - frontend_logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro  # SSL证书目录
    environment:
      - NODE_ENV=production
      - DOMAIN=${DOMAIN}
    restart: unless-stopped
    networks:
      - asap_external
      - asap_internal
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  redis_data:
    driver: local
  redis_logs:
    driver: local
  backend_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local

networks:
  asap_internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  asap_external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
